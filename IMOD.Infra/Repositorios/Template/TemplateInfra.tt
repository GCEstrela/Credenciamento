// ***********************************************************************
// Project: Infra
// Crafted by: Grupo Estrela by Genetec
// Date:  11 - 19 - 2018
// ***********************************************************************

#region

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using IMOD.CrossCutting;
using IMOD.Domain.Entities;
using IMOD.Domain.EntitiesCustom;
using IMOD.Domain.Interfaces;
using IMOD.Infra.Ado;
using IMOD.Infra.Ado.Interfaces;
using IMOD.Infra.Ado.Interfaces.ParamSql;

#endregion

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>


<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>


<# 
//**********************************************************************************************
// This T4 generates POCOs from the specified DB and saves them to the specified folder which 
// is relative to the template's location. One file per table/POCO.
//**********************************************************************************************
 
//****************************
// DEFINE YOUR VARIABLES HERE
//****************************

													//Informe o nome da classe
													string nomeClass="ColaboradorAnexoRepositorio";

													//Informe o  nome da tabela
													string nomeTabela="ColaboradoresAnexos";
													
													//Informe o nome da entidade
													string nomeEntidade="ColaboradorAnexo";
													
													//Informe a primary Key da entidade
													string nomePk="ColaboradorAnexoId";
													
													
										 
#>



namespace IMOD.Infra.Repositorios
{
    public class <#= nomeClass #> : I<#= nomeClass #>
    {
        private readonly string _connection = CurrentConfig.ConexaoString;
        private readonly IDataBaseAdo _dataBase;
        private readonly IDataWorkerFactory _dataWorkerFactory = new DataWorkerFactory();

        public <#= nomeClass #>()
        {
            _dataBase = _dataWorkerFactory.ObterDataBaseSingleton (TipoDataBase.SqlServer, _connection);
        }

        #region  Metodos

        /// <summary>
        ///     Alterar registro
        /// </summary>
        /// <param name="entity"></param>
        public void Alterar(<#= nomeEntidade #> entity)
        {
            using (var conn = _dataBase.CreateOpenConnection())
            {
                
                using (var cmd = _dataBase.UpdateText ("<#= nomeTabela #>", conn))
                {
                    try
                    {
                        cmd.Parameters.Add (_dataBase.CreateParameter (new ParamUpdate ("<#= nomePk #>", entity. <#= nomePk #>, true)));
                        //Coloque aqui todos os parâmetros (campos da tabela), seguindo o exemplo abaixo 
						//cmd.Parameters.Add (_dataBase.CreateParameter (new ParamUpdate ("ColaboradorEmpresaID",entity.ColaboradorEmpresaId, false)));
                       

                        cmd.ExecuteNonQuery();
                       
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Buscar pela chave primaria
        /// </summary>
        /// <param name="id">Primary key</param>
        /// <returns></returns>
        public <#= nomeEntidade #> BuscarPelaChave(int id)
        {
            using (var conn = _dataBase.CreateOpenConnection())
            {
                using (var cmd = _dataBase.SelectText ("<#= nomeTabela #>", conn))

                {
                    try
                    {
                        cmd.Parameters.Add (
                            _dataBase.CreateParameter ( new ParamSelect ("<#= nomePk #>", DbType.Int32, id).Igual()));
                        var reader = cmd.ExecuteReader();
                        var d1 = reader.MapToList<<#= nomeEntidade #>>();

                        return d1.FirstOrDefault();
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Criar registro
        /// </summary>
        /// <param name="entity">Entidade</param>
        public void Criar(<#= nomeEntidade #> entity)
        {
            
            using (var conn = _dataBase.CreateOpenConnection())
            {
               
                using (var cmd = _dataBase.InsertText ("<#= nomeTabela #>", conn))
                {
                    try
                    {                       

                        cmd.Parameters.Add (_dataBase.CreateParameter (new ParamInsert ("<#= nomePk #>", entity.<#= nomePk #>, true)));
                        //Coloque aqui todos os parâmetros (campos da tabela), seguindo o exemplo abaixo 
						//cmd.Parameters.Add (_dataBase.CreateParameter (new ParamInsert ("ColaboradorEmpresaID", DbType.Int32, entity.ColaboradorEmpresaId, false)));
                        
						
                        var key = Convert.ToInt32 (cmd.ExecuteScalar());
                      
                        entity.<#= nomePk #> = key;
                    }
                    catch (Exception ex)
                    {                       
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Listar
        /// </summary>
        /// <returns></returns>
        public ICollection<<#= nomeEntidade #>> Listar(params object[] o)
        {
            using (var conn = _dataBase.CreateOpenConnection())
            {
                using (var cmd = _dataBase.SelectText ("<#= nomeTabela #>", conn))

                {
                    try
                    {
                        cmd.Parameters.Add (_dataBase.CreateParameter (new ParamSelect ("ColaboradorCredencialID", DbType.Int32, o, 0).Igual()));
						//Informe demais parametros se existir...
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamSelect ("CampoA",o, 1).Igual()));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamSelect ("CampoB", DbType.Int32, o, 2).Igual()));
                        var reader = cmd.ExecuteReaderSelect();
                        var d1 = reader.MapToList<<#= nomeEntidade #>>();

                        return d1;
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Deletar registro
        /// </summary>
        /// <param name="entity">Entidade</param>
        public void Remover(<#= nomeEntidade #> entity)
        {
            using (var conn = _dataBase.CreateOpenConnection())
            {
               
                using (var cmd = _dataBase.DeleteText ("<#= nomeTabela #>", conn))
                {
                    try
                    {                      

                        cmd.Parameters.Add (
                            _dataBase.CreateParameter (new ParamDelete ("<#= nomePk #>", entity.<#= nomePk #>).Igual()));

                        cmd.ExecuteNonQuery();
                       
                    }
                    catch (Exception ex)
                    {                      
                        Utils.TraceException (ex);
                    }
                }
            }
        }

     

        #endregion
    }
}
 