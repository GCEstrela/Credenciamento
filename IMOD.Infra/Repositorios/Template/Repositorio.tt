<#@ template debug="false"  hostspecific="true" language="C#" #>
<#@ include file="Manager.ttinclude"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
var manager = Manager.Create(Host, GenerationEnvironment);

							var listaClasses = new List<string[]>();
							//listaClasses.Add(new []{"{Entidade}","{Interface}","{PrimaryKey}");

							listaClasses.Add(new []{"RelatoriosGerenciais","IRelatoriosGerenciaisRepositorio","RelatorioId"});
							listaClasses.Add(new []{"Relatorios","IRelatoriosRepositorio","RelatorioId"});

							listaClasses.Add(new []{"Status","IStatusRepositorio","StatusId"});

							listaClasses.Add(new []{"TecnologiaCredencial","ITecnologiaCredencialRepositorio","CredencialImpressaoId"});

							listaClasses.Add(new []{"TipoAcesso","ITipoAcessoRepositorio","TipoAcessoId"});
							listaClasses.Add(new []{"TipoAtividade","ITipoAtividadeRepositorio","TipoAtividadeId"});
							listaClasses.Add(new []{"TipoCobranca","ITipoCobrancaRepositorio","TipoCobrancaId"});

							listaClasses.Add(new []{"TipoCombustivel","ITipoCombustivelRepositorio","TipoCombustivelId"});
							listaClasses.Add(new []{"TipoCredencial","ITipoCredencialRepositorio","TipoCredencialId"});
							listaClasses.Add(new []{"TipoEquipamento","ITipoEquipamentoRepositorio","TipoEquipamentoId"});
							listaClasses.Add(new []{"TipoEquipamentoVeiculo","ITipoEquipamentoVeiculoRepositorio","TipoEquipamentoViculoId"});


							listaClasses.Add(new []{"TipoServico","ITipoServicoRepositorio","TipoServicoId"});

							listaClasses.Add(new []{"VeiculoAnexo","IVeiculoAnexoRepositorio","VeiculoAnexoId"});
							listaClasses.Add(new []{"VeiculoCredencialimpressao","IVeiculoCredencialimpressaoRepositorio","CredencialImpressaoId"});
							listaClasses.Add(new []{"VeiculoCredencial","IVeiculoCredencialRepositorio","VeiculoCredencialId"});

							listaClasses.Add(new []{"VeiculoEmpresa","IVeiculoEmpresaRepositorio","VeiculoEmpresaId"});
							listaClasses.Add(new []{"VeiculoEquipTipoServico","IVeiculoEquipTipoServicoRepositorio","VeiculoTipoServicoId"});
							listaClasses.Add(new []{"VeiculoSeguro","IVeiculoSeguroRepositorio","VeiculoSeguroId"});
							listaClasses.Add(new []{"Veiculos","IVeiculosRepositorio","EquipamentoVeiculoId"});
					 
							

							
							 

 #>
 <#
 
		foreach(var item in listaClasses) {
		var nomeClass = item[0] + "Repositorio.cs";

		manager.StartNewFile(nomeClass);

		#>

#region

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using IMOD.CrossCutting;
using IMOD.Domain.Entities;
using IMOD.Domain.Interfaces;
using IMOD.Infra.Ado;
using IMOD.Infra.Ado.Interfaces;
using IMOD.Infra.Ado.Interfaces.ParamSql;

#endregion


namespace IMOD.Infra.Repositorios
{
    public class <#= item[0] #>Repositorio :<#= item[1] #> 
    {
	    private readonly string _connection = CurrentConfig.ConexaoString;
        private readonly IDataBaseAdo _dataBase;
        private readonly IDataWorkerFactory _dataWorkerFactory = new DataWorkerFactory();

        #region Construtor

        public  <#= item[0] #>Repositorio()
        {
          _dataBase = _dataWorkerFactory.ObterDataBaseSingleton (TipoDataBase.SqlServer, _connection);
        }

        #endregion

        #region Metodos

        /// <summary>
        ///     Criar registro
        /// </summary>
        /// <param name="entity"></param>
        public void Criar(<#= item[0] #> entity)
        {
             using (var conn = _dataBase.CreateOpenConnection())
            {
                using (var cmd = _dataBase.InsertText ("<#= item[0] #>", conn))
                {
                    try
                    {
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamInsert ("ColaboradorAnexoId", entity.ColaboradorAnexoId, true)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamInsert ("Descricao", entity.Descricao, false)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamInsert ("NomeArquivo", entity.NomeArquivo, false)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamInsert ("ColaboradorID", entity.ColaboradorId, false)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamInsert ("Arquivo", entity.Arquivo, false)));

                        var key = Convert.ToInt32 (cmd.ExecuteScalar());

                        entity.<#= item[2] #> = key;
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Buscar pela chave primaria
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public <#= item[0] #> BuscarPelaChave(int id)
        {
           using (var conn = _dataBase.CreateOpenConnection())
            {
                using (var cmd = _dataBase.SelectText ("<#= item[0] #>", conn))

                {
                    try
                    {
                        cmd.Parameters.Add (_dataBase.CreateParameter (new ParamSelect ("<#= item[2] #>", DbType.Int32, id).Igual()));
                        var reader = cmd.ExecuteReader();
                        var d1 = reader.MapToList<<#= item[0] #>>();

                        return d1.FirstOrDefault();
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Listar
        /// </summary>
        /// <param name="predicate">Expressão de consulta</param>
        /// <returns></returns>
        public ICollection<<#= item[0] #>> Listar(params object[] objects)
        {
            using (var conn = _dataBase.CreateOpenConnection())
            {
                using (var cmd = _dataBase.SelectText ("<#= item[0] #>", conn))

                {
                    try
                    {
                        //cmd.CreateParameterSelect (_dataBase.CreateParameter (new ParamSelect ("NomeArquivo", o, 0).Like()));
                        //cmd.CreateParameterSelect(_dataBase.CreateParameter (new ParamSelect ("ColaboradorID", o, 1).Igual()));

                        var reader = cmd.ExecuteReaderSelect();
                        var d1 = reader.MapToList<<#= item[0] #>>();

                        return d1;
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Alterar registro
        /// </summary>
        /// <param name="entity"></param>
        public void Alterar(<#= item[0] #> entity)
        {
            using (var conn = _dataBase.CreateOpenConnection())
            {
                using (var cmd = _dataBase.UpdateText ("<#= item[0] #>", conn))
                {
                    try
                    {
                        cmd.Parameters.Add (_dataBase.CreateParameter (new ParamUpdate ("<#= item[2] #>", entity.<#= item[2] #>, true)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamUpdate ("Descricao", entity.Descricao, false)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamUpdate ("NomeArquivo", entity.NomeArquivo, false)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamUpdate ("ColaboradorID", entity.ColaboradorId, false)));
                        //cmd.Parameters.Add (_dataBase.CreateParameter (new ParamUpdate ("Arquivo", entity.Arquivo, false)));

                        cmd.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                        throw;
                    }
                }
            }
        }

        /// <summary>
        ///     Deletar registro
        /// </summary>
        /// <param name="predicate"></param>
        public void Remover(<#= item[0] #> entity)
        {
            using (var conn = _dataBase.CreateOpenConnection())
            {
                using (var cmd = _dataBase.DeleteText ("<#= item[0] #>", conn))
                {
                    try
                    {
                        cmd.Parameters.Add (_dataBase.CreateParameter (new ParamDelete ("<#= item[2] #>", entity.<#= item[2] #>).Igual()));

                        cmd.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        Utils.TraceException (ex);
                    }
                }
            }
        }

        
        #endregion
    }
}

 <#
 manager.EndBlock();
 }
 #>

 <#
  manager.Process(true);	
 #>

